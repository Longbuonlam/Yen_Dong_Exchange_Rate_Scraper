import boto3
import os
import argparse
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

# Load AWS credentials and region from environment variables
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_REGION = os.getenv('AWS_REGION', 'ap-southeast-1') # Default to ap-southeast-1 if not set

if not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY:
    print("Error: AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) not set as environment variables.")
    exit(1)

session = boto3.Session(
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name=AWS_REGION
)

s3 = session.client("s3")

# --- argument parsing and date calculation ---
parser = argparse.ArgumentParser(description="Upload exchange rate CSV to S3 for a given currency pair for the previous day.")
parser.add_argument("--source", required=True, help="Source currency (e.g., JPY)")
parser.add_argument("--target", required=True, help="Target currency (e.g., VND)")
args = parser.parse_args()

source_currency = args.source.upper()
target_currency = args.target.upper()

# Calculate "yesterday" to match the filename generated by main.py
# The GitHub Action runs at 00:00 UTC. We want data for the *previous* full day.
date_processed = datetime.utcnow() - timedelta(days=1)
date_str_file = date_processed.strftime('%d-%m-%Y') # Matches main.py filename date format
date_str_s3_path = date_processed.strftime('%d-%m-%Y') # S3 path uses DD-MM-YYYY


bucket_name = "yen-vnd-rate-forcast-1205"

# Filename example: jpy_vnd_exchange_rates(20-05-2025).csv
local_file_name = f"{source_currency.lower()}_{target_currency.lower()}_exchange_rates({date_str_file}).csv"

# S3 object key example: uploads/jpy_vnd_exchange_rates/20-05-2025.csv
s3_object_key = f"uploads/{source_currency.lower()}_{target_currency.lower()}_exchange_rates/{date_str_s3_path}.csv"


try:
    # Check if the local file exists before attempting to upload
    if not os.path.exists(local_file_name):
        print(f"Error: Local file '{local_file_name}' not found. Skipping upload.")
    else:
        s3.upload_file(local_file_name, bucket_name, s3_object_key)
        print(f"Successfully uploaded {local_file_name} to {bucket_name}/{s3_object_key}")
except Exception as e:
    print(f"Error uploading {local_file_name} to S3: {e}")

